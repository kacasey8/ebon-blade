starting out - 1.5 GFlops
using SSE intrinsics - 4.5 GFlops, 
altering for loop order to kji - 5.2 GFlops
using an if statement to handle fringe case - 5.5 GFlops
i loop unrolling + B register blocking - 6.58 GFlops

---- FIRST COMMIT 7/21 ------ saving this in temp.c

altered to jik loop w/ minor k loop unrolling - 7.41226 GFlops
all loops unrolled to += 4 - 10.5316 GFLops

---- swapped to jik loop, all loops unrolled += 4 7/22 ----

discovered a hack changing tempC3 - 11.5 GFlops

---- benchmark.txt update 7/22 -----

albert hints - can get assembly file, some weird command maybe a -s flag
			- learning capacity limited from capping part 1
			- possible -0 compile will normalize results
			- load1 converts to native instructions which can be better optimized

---- cleaned up some code 7/24 ----

Part 2

added cache blocking, block size of 64 - average 40 GFlops

---- cache blocking of 64 implemented 7/29 ----

int register blocking
number of multiplications heavily reduced - average ~ 45 GFlops

--- int register blocking ---